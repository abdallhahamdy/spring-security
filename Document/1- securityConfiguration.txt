------------------------------------------------------------------MainController.java--------------------------------------------------------------------------------------------

package com.spring.springsecurity.controller;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
@Controller
@RequestMapping("/api")
public class MainController {
    @GetMapping("/main")
    public String index(){
        return "index";
    }
    @GetMapping("manage")
    public String manage(){
        return "management/index";
    }
    @GetMapping("admin")
    public String admin(){
        return "admin/index";
    }
    @GetMapping("profile")
    public String profile(){
        return "profile/index";
    }

    @GetMapping("admin/myadmin")
    public String myAdmin(){
        return "admin/myadmin";
    }
}

---------------------------------------------------------SecurityConfiguration.java--------------------------------------------------------------------------------------------

package com.spring.springsecurity.securityconfig;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth
                .inMemoryAuthentication()
                .withUser("ahmed").password(passwordEncoder().encode("ahmed123")).roles("ADMIN")
                .and()
                .withUser("yaser").password(passwordEncoder().encode("yaser123")).roles("MANGER")
                .and()
                .withUser("karim").password(passwordEncoder().encode("karim")).roles("USER");
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                .antMatchers("/api/main").permitAll()
                .antMatchers("/api/profile").authenticated()
                .antMatchers("/api/admin/**").hasRole("ADMIN")
                .antMatchers("/api/manage").hasAnyRole("ADMIN","MANGER")
                .and()
                //.anyRequest().authenticated()                .and()
                .httpBasic();
    }

    @Bean
    PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

---------------------------------------------------------------myadmin.html---------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head th:insert="fragments.html :: headerfiles"></head>
<body>
<header th:insert="fragments.html :: nav"></header>
<!-- Page content goes here -->
<div class="container">
    <p>yes Admin</p>
</div>
</body>
</html>

-------------------------------------------------------------fragments.html---------------------------------------------------------------------------------------------------

<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<!-- Fragment #1 : Header files contains css and js references -->
<head th:fragment="headerfiles">
    <title>Introduction to SpringBoot Security</title>
    <meta charset="UTF-8"/>
    <link th:href="@{~/bootstrap.min.css}" rel="stylesheet">
    <link th:href="@{~/fontawesome/css/all.min.css}" rel="stylesheet">
</head>
<body>
<!-- Fragment #2 : Navbar contains nav links -->
<div th:fragment="nav">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Boot Security</a>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#" th:href="@{~/api/main}"><i class="fa fa-home"></i>Home</a>                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" th:href="@{~/api/profile}">Profile</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" th:href="@{~/api/admin}">Admin</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" th:href="@{~/api/manage}">Management</a>
                </li>
                <li>
                    <a class="nav-link" href="#" th:href="@{~/api/admin/myadmin}">myAdmin</a>
                </li>
            </ul>
            <form class="form-inline my-2 my-lg-0" form-method="post">
                <button class="btn btn-outline-danger my-2 my-sm-0 btn-sm" type="submit">Logout</button>
                <button th:href="@{~/api/login}" class="btn btn-outline-info my-2 my-sm-0 btn-sm" type="submit">Login</button>
            </form>
        </div>
    </nav>
</div>
</body>
</html>