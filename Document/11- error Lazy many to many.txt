--------------------------------------------------------------delete RoleRepositiory.java---------------------------------------------------------

---------------------------------------------------------------DBInit.java------------------------------------------------------------------------

package com.spring.springsecurity.db;

import com.spring.springsecurity.dao.AuthoritiesRepository;
import com.spring.springsecurity.dao.UserRepository;
import com.spring.springsecurity.model.Authorities;
import com.spring.springsecurity.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class DBInit implements CommandLineRunner {

    private UserRepository userRepository;
    private AuthoritiesRepository authoritiesRepository;

    private PasswordEncoder passwordEncoder;

    @Autowired
    public DBInit(UserRepository userRepository, AuthoritiesRepository authoritiesRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.authoritiesRepository = authoritiesRepository;
        this.passwordEncoder = passwordEncoder;
    }

     public DBInit(UserRepository userRepository, AuthoritiesRepository authoritiesRepository) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.authoritiesRepository = authoritiesRepository;
    }

    @Override
    public void run(String... args) throws Exception {
        this.userRepository.deleteAll();
        User admin = new User("ahmed", passwordEncoder.encode( "ahmed123"),"20","alex",1);
        admin.setAuthorities(this.authoritiesRepository.findAll());
        userRepository.save(admin);
        ///////////////////////////////////////////////////////////////////
        User manger = new User("yasser",passwordEncoder.encode("yasser123"),"20","alex",1);
        Authorities mangerAuthorities1 = authoritiesRepository.findById(2L).get();
        Authorities mangerAuthorities2 = authoritiesRepository.findById(3L).get();
        Authorities mangerAuthorities3 = authoritiesRepository.findById(5L).get();
        Authorities mangerAuthorities4 = authoritiesRepository.findById(6L).get();
        manger.getAuthorities().add(mangerAuthorities1);
        manger.getAuthorities().add(mangerAuthorities2);
        manger.getAuthorities().add(mangerAuthorities3);
        manger.getAuthorities().add(mangerAuthorities4);
        userRepository.save(manger);
        ////////////////////////////////////////////////////////////////
        User user = new User("karim",passwordEncoder.encode("karim123"),"20","alex",1);
        Authorities userAuthorities = authoritiesRepository.findById(3L).get();
        Authorities userAuthorities2 = authoritiesRepository.findById(6L).get();
        user.getAuthorities().add(userAuthorities2);
        userRepository.save(user);
    }
}

----------------------------------------------------------------------Delete Role.java----------------------------------------------------------------------------

---------------------------------------------------------------------User.java------------------------------------------------------------------------------------

package com.spring.springsecurity.model;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.*;
@Entity
@Table(name = "user")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(name = "user_name")
    private String userName;
    @Column(name = "password")
    private String password;
    @Column(name = "age")
    private String age;
    @Column(name = "address")
    private String address;
    @Column(name = "active")
    private int active;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
            name = "user_authorities",
            joinColumns = {@JoinColumn(name = "user_id")},
            inverseJoinColumns ={ @JoinColumn(name = "authorities_id")}
    )
    private List<Authorities> authorities = new ArrayList<>();
    public User() {
    }
    public User(String userName, String password, String age, String address, int active) {
        this.userName = userName;
        this.password = password;
        this.age = age;
        this.address = address;
        this.active = active;
    }
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getUserName() {
        return userName;
    }
    public void setUserName(String userName) {
        this.userName = userName;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public String getAge() {
        return age;
    }
    public void setAge(String age) {
        this.age = age;
    }
    public String getAddress() {
        return address;
    }
    public void setAddress(String address) {
        this.address = address;
    }
    public int getActive() {
        return active;
    }
    public void setActive(int active) {
        this.active = active;
    }

    public List<Authorities> getAuthorities() {
        return authorities;
    }
    public void setAuthorities(List<Authorities> authorities) {
        this.authorities = authorities;
    }
}

------------------------------------------------------------------------------UserPrincipal.java----------------------------------------------------------------------------

package com.spring.springsecurity.model;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
public class UserPrincipal implements UserDetails {
    private User user;
    @Autowired
    public UserPrincipal(User user) {
        this.user = user;
    }
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        List<GrantedAuthority> authorities = new ArrayList<>();
        this.user.getAuthorities().forEach(p -> {
            GrantedAuthority authority = new SimpleGrantedAuthority(p.getAuthoritieName());
            authorities.add(authority);
        });

        return authorities;
    }

    @Override
    public String getPassword() {
        return this.user.getPassword();
    }
    @Override
    public String getUsername() {
        return this.user.getUserName();
    }
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }
    @Override
    public boolean isEnabled() {
        return this.user.getActive() == 1;
    }
}